// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/employees": {
            "post": {
                "description": "Create a new employee with all required information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1"
                ],
                "summary": "Create a new employee",
                "parameters": [
                    {
                        "description": "Employee data",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Employee"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns created employee ID",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Company not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Employee or passport already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/employees/company/{companyID}": {
            "get": {
                "description": "Retrieve all employees belonging to a specific company",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1"
                ],
                "summary": "Get employees by company ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of employees",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Employee"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid company ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Company or employees not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/employees/company/{companyID}/department/{departmentID}": {
            "get": {
                "description": "Retrieve employees belonging to specific company and department",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1"
                ],
                "summary": "Get employees by company and department",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "companyID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Department ID",
                        "name": "departmentID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of employees",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Employee"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid company or department ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Department or employees not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/employees/{id}": {
            "delete": {
                "description": "Delete employee by ID",
                "tags": [
                    "V1"
                ],
                "summary": "Delete employee",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Employee ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Invalid employee ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Employee not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update existing employee data by ID",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "V1"
                ],
                "summary": "Update employee information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Employee ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated employee data",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateEmployee"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Employee, company or department not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Passport already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.UpdateEmployee": {
            "type": "object",
            "properties": {
                "company_id": {
                    "type": "integer"
                },
                "department_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "passport_number": {
                    "type": "string"
                },
                "passport_type": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "model.Department": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "model.Employee": {
            "type": "object",
            "properties": {
                "company_id": {
                    "type": "integer"
                },
                "department": {
                    "$ref": "#/definitions/model.Department"
                },
                "name": {
                    "type": "string"
                },
                "passport": {
                    "$ref": "#/definitions/model.Passport"
                },
                "phone": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "model.Passport": {
            "type": "object",
            "properties": {
                "number": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
